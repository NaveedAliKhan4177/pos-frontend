name: Deploy Frontend and Backend to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Confirm folder structure
        run: |
          echo "Listing project directories for debugging"
          ls -la
          ls -la frontend || echo "No frontend folder found"
          ls -la backend || echo "No backend folder found"

      - name: Copy project files to EC2
        run: |
          ssh-keyscan -H 13.203.198.46 >> ~/.ssh/known_hosts

          # Copy frontend
          if [ -d "./frontend" ]; then
            rsync -avz --exclude=node_modules --exclude=.git ./frontend/ ubuntu@13.203.198.46:/home/ubuntu/pos-frontend
          else
            rsync -avz --exclude=node_modules --exclude=.git ./ ubuntu@13.203.198.46:/home/ubuntu/pos-frontend
          fi

          # Copy backend
          if [ -d "./backend" ]; then
            rsync -avz --exclude=node_modules --exclude=.git ./backend/ ubuntu@13.203.198.46:/home/ubuntu/pos-backend
          else
            echo "Backend folder not found, skipping backend deployment copy."
          fi

      - name: SSH into EC2 and deploy both apps
        run: |
          ssh ubuntu@13.203.198.46 << 'EOF'
            set -e

            echo "Starting FRONTEND deployment..."

            cd pos-frontend

            # Stop and remove any container using port 5173
            docker ps --filter "publish=5173" --format "{{.ID}}" | xargs -r docker stop
            docker ps -a --filter "publish=5173" --format "{{.ID}}" | xargs -r docker rm

            # Stop old named container (if exists)
            docker stop pos-frontend-container || true
            docker rm pos-frontend-container || true

            # Remove old image forcefully if exists
            docker rmi -f pos-frontend || true

            # Build and run new frontend container
            docker build -t pos-frontend .
            docker run -d -p 5173:5173 --name pos-frontend-container pos-frontend

            echo "Frontend deployed successfully."

            echo "Starting BACKEND deployment..."

            cd ../pos-backend

            # Stop and remove any container using port 8000
            docker ps --filter "publish=8000" --format "{{.ID}}" | xargs -r docker stop
            docker ps -a --filter "publish=8000" --format "{{.ID}}" | xargs -r docker rm

            # Stop old named container (if exists)
            docker stop pos-backend-container || true
            docker rm pos-backend-container || true

            # Remove old image forcefully if exists
            docker rmi -f pos-backend || true

            # Build and run new backend container
            docker build -t pos-backend .
            docker run -d -p 8000:8000 --name pos-backend-container pos-backend

            echo "Backend deployed successfully."
          EOF
